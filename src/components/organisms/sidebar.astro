---
import { getLangFromUrl, useRouter, useTranslations } from "src/i18n";
import Logo from "src/components/atoms/logo/logo.astro";
import Icon, {
  type Props as IconProps,
} from "src/components/atoms/icons/icon.astro";
import { ROUTES } from "src/constants/routes";
import { getContacts } from "src/features/contacts/api/get-contacts";

interface Props {
  routeKey: keyof typeof ROUTES;
}

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
const router = useRouter(lang);

const routes: Array<{
  key: Props["routeKey"];
  name: string;
  path: string;
  icon: IconProps["name"];
}> = [
  {
    key: "home",
    name: t("nav.home"),
    path: router("/"),
    icon: "home",
  },
  {
    key: "about",
    name: t("nav.about"),
    path: router("/about"),
    icon: "about",
  },
  {
    key: "blog",
    name: t("nav.blog"),
    path: router("/blog"),
    icon: "blog",
  },
  {
    key: "projects",
    name: t("nav.projects"),
    path: router("/projects"),
    icon: "projects",
  },
  {
    key: "stack",
    name: t("nav.stack"),
    path: router("/stack"),
    icon: "stack",
  },
  {
    key: "bookmarks",
    name: t("nav.bookmarks"),
    path: router("/bookmarks"),
    icon: "bookmarks",
  },
  {
    key: "contact",
    name: t("nav.contact"),
    path: router("/contact"),
    icon: "contact",
  },
];

const contacts = await getContacts(lang);

const props = Astro.props;
---

<aside
  id="sidebar"
  data-state="closed"
  class:list={[
    "fixed top-0 left-0 z-40 w-full sm:w-[300px] h-full sm:h-screen bg-white/10 dark:bg-transparent/25 shadow-md",
    "transition-transform -translate-x-full sm:translate-x-0",
    "data-[state=opened]:translate-x-0 data-[state=opened]:bg-white dark:data-[state=opened]:bg-gray-900",
  ]}
>
  <div
    class="flex flex-col place-content-between h-full px-8 sm:px-10 md:px-14 py-8 overflow-y-auto space-y-4"
  >
    <div class="flex flex-row place-content-between">
      <button
        id="sidebar-close-button"
        class="absolute top-0 right-0 sm:hidden p-4"
        transition:persist
      >
        <Icon name="close" class="w-4 h-4 text-zinc-900 dark:text-white" />
      </button>
      <a class="flex flex-1 justify-center" href={router("/")}>
        <Logo class="aspect-square h-16 sm:h-16 md:h-20 text-primary-500" />
      </a>
    </div>

    <nav class="flex flex-col space-y-2">
      {
        routes.map((route) => (
          <a
            class:list={[
              "group flex flex-row px-4 py-2 gap-x-3 items-center rounded-lg font-display transition-colors",
              "text-sm text-zinc-400 dark:text-zinc-400 hover:text-primary-600 dark:hover:text-zinc-100",
              "data-[current]:text-primary-600 dark:data-[current]:text-zinc-100 data-[current]:bg-primary-100 dark:data-[current]:bg-primary-900 data-[current]:shadow-md",
            ]}
            href={route.path}
            data-current={props.routeKey === route.key}
          >
            <Icon
              name={route.icon}
              class="w-6 h-6 transition-transform transform duration-300 group-hover:scale-125"
            />
            {route.name}
          </a>
        ))
      }
    </nav>

    <ul class="flex flex-row justify-center space-x-6">
      {
        contacts.map((contact) => (
          <li>
            <a href={contact.data.url} target="_blank">
              <Icon
                class="w-5 h-5 aspect-square transition-transform transform duration-500 hover:scale-125 text-zinc-500 dark:text-zinc-300"
                name={contact.id}
              />
            </a>
          </li>
        ))
      }
    </ul>
  </div>
</aside>

<script is:inline>
  const onSidebarCloselick = () => {
    const element = document.getElementById("sidebar");
    element.setAttribute("data-state", "closed");

    document.body.style.overflow = "auto";
    document.body.style.height = "100%";
  };

  document
    .getElementById("sidebar-close-button")
    .addEventListener("click", onSidebarCloselick);
</script>
